import Layout from "@/components/templates/page";
import { useGetConsolidations } from "@/lib/queries";
import Head from "next/head";
import Header from "@/components/base/header";
import { RiSearchLine, RiCloseLine } from "react-icons/ri";
import Avatar from "@/components/base/avatar";
import { getInitials } from "@/lib/utils";
import moment from "moment";
import { useState } from "react";
import Lesson from "@/components/base/lesson";

export default function Home() {
  const { data } = useGetConsolidations();
  const [search, setSearch] = useState("");
  const [showSearch, setShowSearch] = useState(false);

  const filteredData = data?.filter((conso) => {
    return (
      conso.disciple_id.first_name.toLowerCase().includes(search.toLowerCase()) || // prettier-ignore
      conso.disciple_id.last_name.toLowerCase().includes(search.toLowerCase()) || // prettier-ignore
      conso.lesson_code.name.toLowerCase().includes(search.toLowerCase()) // prettier-ignore
    );
  });

  return (
    <>
      <Head>
        <title>Disciplr | Consolidations</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Layout activeRoute="conso">
        <Header>
          <div className="flex w-full justify-between items-center">
            <span>Consolidations</span>
            {!showSearch && (
              <button onClick={() => setShowSearch(true)}>
                <RiSearchLine />
              </button>
            )}
          </div>
        </Header>
        {showSearch && (
          <div className="flex justify-between px-7 mb-7">
            <input
              autoFocus
              value={search}
              onChange={(e) => setSearch(e.target.value)}
              placeholder="Start typing to search"
              className="w-full outline-none py-2"
            />
            <button
              onClick={() => {
                setSearch("");
                setShowSearch(false);
              }}
              className="text-3xl"
            >
              <RiCloseLine />
            </button>
          </div>
        )}
        <div className="h-full w-full flex flex-col gap-5">
          {filteredData?.map((conso) => {
            return (
              <div
                key={conso.id}
                onClick={() => {}}
                className="cursor-pointer bg-[#F9F9F9] rounded-[25px] py-7 px-11 mx-7 flex items-center gap-5"
              >
                <div className="relative flex justify-center">
                  <Avatar fontSize="text-xl" size={77}>
                    {getInitials(
                      `${conso.disciple_id.first_name} ${conso.disciple_id.last_name}`
                    )}
                  </Avatar>
                  <div className="absolute bottom-0 whitespace-nowrap z-50">
                    <Lesson
                      code={conso.lesson_code.code}
                      name={conso.lesson_code.name}
                    />
                  </div>
                </div>
                <div className="flex flex-col">
                  <span>
                    {conso.disciple_id.first_name} {conso.disciple_id.last_name}
                  </span>
                  <span className="text-sm text-[#686777]">
                    <RelativeDate date={conso.created_at} />
                  </span>
                </div>
              </div>
            );
          })}
        </div>
      </Layout>
    </>
  );
}

const RelativeDate = (props: { date: any }) => {
  const [original, setShowOriginal] = useState(false);

  if (original)
    return (
      <button className="text-left" onClick={() => setShowOriginal(false)}>
        {moment(props.date).format("LL")}
      </button>
    );

  return (
    <button className="text-left" onClick={() => setShowOriginal(true)}>
      {moment(props.date).fromNow()}
    </button>
  );
};
