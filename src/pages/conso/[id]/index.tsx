import Layout from "@/components/templates/page";
import Head from "next/head";
import Header from "@/components/base/header";
import moment from "moment";
import { useState } from "react";
import Lesson from "@/components/base/lesson";
import { useRouter } from "next/router";
import Avatar from "@/components/base/avatar";
import { getInitials } from "@/lib/utils";
import { useGetConsolidationDetails, useGetProfile } from "@/lib/queries";
import { useConsolidate } from "@/lib/mutations";
import {
  RiCheckboxCircleLine,
  RiCheckboxBlankCircleLine,
} from "react-icons/ri";

export default function ConsolidationDetails() {
  const router = useRouter();
  const disciple_id = router.query.id;
  const { data: user } = useGetProfile();
  const { data } = useGetConsolidationDetails(String(disciple_id));
  const { mutate: consolidate, isLoading } = useConsolidate();

  const handleGoUpOneLevel = () => {
    const currentPathname = router.asPath;
    const parentPathname = currentPathname.split("/").slice(0, -1).join("/");
    router.push(parentPathname);
  };

  const handleConsolidate = () => {
    consolidate(
      {
        disciple_id: String(disciple_id),
        consolidator_id: String(user?.id),
      },
      {
        onSuccess: (response) => {
          router.push(
            "/conso/[id]/[lesson]",
            `/conso/${disciple_id}/${response.id}`
          );
        },
      }
    );
  };

  return (
    <>
      <Head>
        <title>Disciplr | Conso Details</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Layout activeRoute="conso">
        <Header showBackArrrow onBack={handleGoUpOneLevel}>
          <div className="flex w-full justify-between items-center">
            <span>Conso Details</span>
          </div>
        </Header>
        <div className="flex items-center flex-col py-5 z-10">
          <Avatar fontSize="text-2xl" size={100} id={data?.disciple.id} />

          <div className="flex flex-col items-center gap-1 mt-5">
            <span className="text-[#8D8D8D]">
              {data?.disciple.first_name} {data?.disciple.last_name}
            </span>
            <span className="text-[#8D8D8D] text-center">
              {data?.disciple.email ?? "-"}
            </span>
            {data?.recent && (
              <Lesson
                code={data.recent.lesson_code.code}
                name={data.recent.lesson_code.name}
              />
            )}
          </div>
          <div className="mt-10 flex gap-3">
            <button
              onClick={handleConsolidate}
              disabled={isLoading || data?.recent.status === "DRAFT"}
              className="disabled:opacity-30 bg-primary rounded-2xl px-8 py-4 text-white"
            >
              Consolidate
            </button>
            <button className="bg-gray-300 rounded-2xl px-8 py-4 text-white opacity-50 cursor-not-allowed">
              Contact Now
            </button>
          </div>
          <div className="text-[#B4B4B4] mt-10">
            Consolidated {moment(data?.recent.created_at).fromNow()}
          </div>
        </div>
        <div className="px-7 z-10 mt-10">
          <header className="font-semibold text-[#686777] text-xl">
            HISTORY
          </header>
          <div className="flex flex-col gap-10 mt-7">
            {data?.history?.map((conso) => {
              return (
                <div
                  key={conso.lesson_code.code}
                  className="flex items-center gap-5 cursor-pointer"
                  onClick={() =>
                    router.push(
                      `/conso/[id]/[lesson]`,
                      `/conso/${disciple_id}/${conso.id}`
                    )
                  }
                >
                  <div className="flex items-center justify-between w-full">
                    <div className="shrink-0 flex gap-5">
                      <Lesson
                        code={conso.lesson_code.code}
                        name={conso.lesson_code.name}
                      />
                      <span className="text-sm text-[#686777]">
                        {moment(conso.created_at).fromNow()} (
                        {moment(conso.created_at).format("MM DD, YYYY")})
                      </span>
                    </div>
                  </div>
                  {conso.status === "DRAFT" && (
                    <span className="text-lg text-gray-400">
                      <RiCheckboxBlankCircleLine />
                    </span>
                  )}
                  {conso.status === "PUBLISHED" && (
                    <span className="text-lg text-[#6e7ac5]">
                      <RiCheckboxCircleLine />
                    </span>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </Layout>
      {/* <div className="absolute top-[92px] left-[0] z-0">
        <SoftVector />
      </div> */}
    </>
  );
}

function SoftVector() {
  return (
    <svg
      width="333"
      height="645"
      viewBox="0 0 333 645"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M62.0411 2.03864C115.277 7.05982 164.074 27.6469 208.289 57.7131C253.807 88.6648 297.642 124.669 317.737 175.909C338.561 229.009 336.825 288.285 320.097 342.814C303.164 398.012 261.59 437.992 223.914 481.746C173.05 540.815 138.608 627.846 62.0411 642.5C-15.7679 657.392 -90.0602 602.939 -152.13 553.718C-212.125 506.143 -264.44 445.178 -281.044 370.438C-296.864 299.226 -272.612 225.991 -239.361 161.061C-210.001 103.73 -162.702 58.1543 -105.729 28.0948C-54.4208 1.02401 4.28367 -3.40904 62.0411 2.03864Z"
        fill="url(#paint0_linear_287_1554)"
      />
      <defs>
        <linearGradient
          id="paint0_linear_287_1554"
          x1="200.5"
          y1="552"
          x2="23.5"
          y2="645"
          gradientUnits="userSpaceOnUse"
        >
          <stop stop-color="#F8F8FA" />
          <stop offset="1" stop-color="#F8F8FA" stop-opacity="0" />
        </linearGradient>
      </defs>
    </svg>
  );
}
