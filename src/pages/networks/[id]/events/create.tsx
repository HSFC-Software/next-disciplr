import Header from "@/components/base/header";
import Layout from "@/components/templates/page";
import { useGetNetworkDetails } from "@/lib/queries";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import Body from "@/components/base/body";
import Button from "@/components/base/button";
import { useCreateEvent } from "@/lib/mutations";
import DatePicker from "@/components/modules/datepicker";
import SelectPicker from "@/components/modules/selectpicker";
// import TimePicker from "@/components/modules/timepicker";
import moment from "moment";
import BreadCrumbs from "@/components/modules/breadcrumbs";
import { store } from "@/lib/models";
import { EventType } from "@/lib/api";

export const events = {
  CELLGROUP: "Cell Group",
  CLOSED_CELL: "Closed Cell",
  CONSOLIDATION: "Consolidation",
  PID: "PID",
};

const AddEvent = () => {
  const { mutate, isLoading: isSubmiting } = useCreateEvent();

  const [showDatePicker, setShowDatePicker] = useState(false);
  const [showEventTypePicker, setShowEventTypePicker] = useState(false);
  // const [showTimeStartPicker, setShowTimeStartPicker] = useState(false);

  const [eventType, setEventType] = useState<EventType>("");
  const [date, setDate] = useState<Date | null>(null);
  const [eventName, setEventName] = useState("");
  // const [timeStart, setTimeStart] = useState("");

  const router = useRouter();
  const networkId = String(router.query.id);
  const { data: network } = useGetNetworkDetails(networkId);

  useEffect(() => {
    if (network?.id) {
      store.dispatch.BreadCrumbs.addPage({
        id: "create-event",
        title: "Create Events",
        url: window.origin + router.asPath,
      });
    }
  }, [network, router]);

  // selected date should be the default date
  useEffect(() => {
    const selectedDate = store.getState().App.selectedEventDate;
    if (selectedDate) {
      setDate(new Date(selectedDate));
    }
  }, []);

  const handleSubmit = () => {
    mutate(
      {
        network_id: networkId,
        name: eventName,
        event_type: eventType,
        date_time: moment(date).utc().toISOString(),
      },
      {
        onSuccess: (response) => {
          // go to event details page
          router.push(`/networks/${networkId}/events/${response.id}`);
        },
      }
    );
  };

  return (
    <>
      <DatePicker
        isVisible={showDatePicker}
        onClose={() => setShowDatePicker(false)}
        onConfirm={(value) => {
          const date = new Date(value.year, value.monthIndex, value.date);
          setDate(date);
        }}
      />
      {/* <TimePicker
        isVisible={showTimeStartPicker}
        onClose={() => setShowTimeStartPicker(false)}
        onConfirm={(value: any) => {
          setTimeStart(`${value.hours}:${value.minutes} ${value.meridian}`);
        }}
      /> */}
      <SelectPicker
        label="Event Type"
        isVisible={showEventTypePicker}
        value={eventType}
        onConfirm={(value) => {
          setEventType(value as EventType);
          setEventName(`${network?.name} ${(events as any)?.[value]} Event`); // Network's Cellgroup Event
        }}
        onClose={() => setShowEventTypePicker(false)}
      >
        <option value="CELLGROUP">Cellgroup</option>
        <option value="CLOSED_CELL">Closed Cell</option>
        <option value="CONSOLIDATION">Consolidation</option>
        <option value="PID">PID</option>
      </SelectPicker>
      <Head>
        <title>Disciplr</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Layout activeRoute="networks">
        <Header showBackArrrow>
          <div className="flex w-full justify-between items-center">
            Add Event
          </div>
        </Header>
        <div className="px-7">
          <BreadCrumbs activePageId="create-event" />
        </div>
        <Body>
          <div className="p-7 flex flex-col gap-3">
            <label className="block uppercase text-sm">Event Type</label>
            <input
              disabled={isSubmiting}
              readOnly
              value={(events as any)?.[eventType]}
              onFocus={() => setShowEventTypePicker(true)}
              placeholder="Select Event Type"
              className="bg-[#f2f2f8] w-full px-4 py-3 rounded-lg outline-none"
            />
            <label className="block uppercase text-sm">Event Name</label>
            <input
              disabled={isSubmiting}
              value={eventName}
              onChange={(e) => setEventName(e.target.value)}
              placeholder="Enter Event Name"
              className="bg-[#f2f2f8] w-full px-4 py-3 rounded-lg outline-none"
            />
            <label className="block uppercase text-sm">Date</label>
            <input
              disabled={isSubmiting}
              id="date-input"
              readOnly
              value={date ? moment(date).format("MMMM DD, YYYY") : ""}
              onFocus={() => setShowDatePicker(true)}
              placeholder="Select Event Type"
              className="bg-[#f2f2f8] w-full px-4 py-3 rounded-lg outline-none"
            />
            <Button disabled={isSubmiting} onClick={handleSubmit}>
              Add Event
            </Button>
          </div>
        </Body>
      </Layout>
    </>
  );
};

export default AddEvent;
