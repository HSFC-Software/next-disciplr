import Header from "@/components/base/header";
import Layout from "@/components/templates/page";
import Head from "next/head";
import { useRouter } from "next/router";
import Body from "@/components/base/body";
import { useGetEvent, useGetNetworkMembers } from "@/lib/queries";
import MemberBadge from "@/components/base/member-badge/badge";
import moment from "moment";
import { useState } from "react";
import { useAddParticipants, useRemoveParticipant } from "@/lib/mutations";
import { EventParticipant } from "@/lib/api";

const EventDetails = () => {
  const router = useRouter();
  const networkId = String(router.query.id);
  const eventId = String(router.query.event_id);

  const { mutate: addParticipant, isLoading: isAdding } =
    useAddParticipants(eventId);
  const { mutate: removeParticipant, isLoading: isRemoving } =
    useRemoveParticipant(eventId);

  const { data: members } = useGetNetworkMembers(networkId);
  const { data: event } = useGetEvent(eventId);

  const [q, setQ] = useState("");
  const [que, setQue] = useState<any[]>([]);
  const [removeQue, setRemoveQue] = useState<string[]>([]);

  const eventParticipants = event?.event_participants?.map(
    (participant) => participant.participant_id.id
  );

  const filteredMembers = members?.filter((member) => {
    const keyword = q.trim().split(" ");
    const match = keyword.some((word) => {
      word = word.toLowerCase();
      const first_name = member.disciples.first_name?.toLowerCase?.() ?? "";
      const last_name = member.disciples.last_name?.toLowerCase?.() ?? "";

      if (first_name.includes(word)) return true;
      if (last_name.includes(word)) return true;

      return false;
    });

    if (member.disciples.id)
      if (eventParticipants?.includes(member.disciples.id)) {
        return;
      }

    if (match) return true;
  });

  const handleSelectParticipant = (member: { disciples: { id: string } }) => {
    // if(member.id)
    setQ("");
    setQue((prev) => [...prev, member]);
    addParticipant([member.disciples.id], {
      onSettled() {
        setQue((prev) =>
          prev.filter((item) => item.disciples.id !== member.disciples.id)
        );
      },
    });
  };

  const handleRemoveParticipant = (participant: EventParticipant) => {
    setRemoveQue((prev) => [...prev, participant.id]);
    removeParticipant(participant.id, {
      onSettled() {
        setRemoveQue((prev) => prev.filter((id) => id !== participant.id));
      },
    });
  };

  return (
    <>
      <Head>
        <title>Event</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Layout activeRoute="networks">
        <Header showBackArrrow>
          <div className="flex w-full justify-between items-center">
            {event?.name}
          </div>
          {event?.date_time && (
            <span className="text-xs text-gray-500 font-normal">
              {moment(event?.date_time).format("LLLL")}
            </span>
          )}
        </Header>
        {/* <div className="px-7">
          <BreadCrumbs activePageId="create-event" />
        </div> */}
        <Body>
          <div className="px-7">
            <div>
              {/* <header className="flex justify-between">
                <span className="text-[#686777]">PARTICIPANTS</span>
                <Link
                  href={`/networks/${networkId}/events/${eventId}/participants`}
                  className="text-[#686777]"
                >
                  UPDATE{" "}
                  <span className="ml-2 px-2 bg-[#6e7ac5] text-white rounded-lg text-lg">
                    +
                  </span>
                </Link>
              </header> */}
              <label className="block uppercase text-sm text-[#686777] mb-3">
                Participants
              </label>
              <input
                value={q}
                onChange={(e) => setQ(e.target.value)}
                autoFocus
                placeholder="Search Participant"
                className="bg-[#f2f2f8] w-full px-4 py-3 rounded-lg outline-none"
              />
              <div className="relative">
                {q && (
                  <div className="max-h-[180px] overflow-y-auto py-2 absolute bg-white w-full z-20">
                    {filteredMembers?.map((member) => {
                      const name = `${member.disciples.first_name ?? ""} ${
                        member.disciples.last_name ?? ""
                      }`.trim();
                      return (
                        <li
                          onClick={() => handleSelectParticipant(member as any)}
                          className="block py-2 pl-2 cursor-pointer"
                          key={member.disciples.id}
                        >
                          {name}
                        </li>
                      );
                    })}
                  </div>
                )}
                {q && filteredMembers?.length === 0 && (
                  <div className="max-h-[180px] overflow-y-auto py-2 absolute bg-white w-full z-20 py-4 text-gray-400 text-sm">
                    No participant available.
                  </div>
                )}
              </div>
              <div className="flex gap-4 mt-3 flex-wrap gap-x-3 gap-y-2">
                {event?.event_participants?.map((participant) => (
                  <span
                    style={{
                      opacity: removeQue.includes(participant.id) ? 0.5 : 1,
                    }}
                    key={participant.id}
                  >
                    <MemberBadge
                      editable
                      onRemove={() => handleRemoveParticipant(participant)}
                      id={participant.participant_id.id}
                      status={participant.participant_id.status}
                      first_name={participant.participant_id.first_name}
                      last_name={participant.participant_id.last_name}
                    />
                  </span>
                ))}
                <>
                  {que
                    ?.filter?.((member) => {
                      if (eventParticipants?.includes(member?.disciples?.id))
                        return false;
                      return true;
                    })
                    ?.map((member) => (
                      <MemberBadge
                        key={member?.disciples.id}
                        id={member?.disciples.id}
                        status={member?.disciples.status}
                        first_name={member?.disciples.first_name}
                        last_name={member?.disciples.last_name}
                      />
                    ))}
                </>
              </div>
            </div>
          </div>
        </Body>
      </Layout>
    </>
  );
};

export default EventDetails;
