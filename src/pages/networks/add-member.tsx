import Header from "@/components/base/header";
import Layout from "@/components/templates/layout";
import { useGetNetworkDetails, useSearchLeaders } from "@/lib/queries";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import Body from "@/components/base/body";
import Button from "@/components/base/button";
import { SearchedLeader } from "@/lib/api";
import useDebounce from "@/lib/hooks";
import { useLinkExistingMember, useLinkNewMember } from "@/lib/mutations";

const AddMember = () => {
  const router = useRouter();
  const networkId = String(router.query.id);

  const [q, setQ] = useState("");
  const [initialized, setInitialized] = useState(false);
  const [addType, setAddType] = useState<"Search" | "Add">("Search");
  const debouncedSearch = useDebounce(q, 500);
  const { data: searchResult } = useSearchLeaders(debouncedSearch);
  const { data: network } = useGetNetworkDetails(networkId);
  const [selected, setSelected] = useState<SearchedLeader | null>(null);

  const [first_name, setFirstname] = useState("");
  const [last_name, setLastname] = useState("");

  // mutations
  const { mutate: linkExistingMember } = useLinkExistingMember(networkId);
  const { mutate: linkNewMember } = useLinkNewMember(networkId);

  useEffect(() => {
    if (network && !initialized) {
      setInitialized(true);
    }
  }, [network, initialized]);

  const handleOnSuccess = () => {
    router.push(`/networks/${router.query.id}`);
  };

  const handleSubmit = () => {
    if (addType === "Add") {
      linkNewMember(
        { first_name, last_name, network_id: networkId },
        { onSuccess: handleOnSuccess }
      );
    }

    if (addType === "Search") {
      linkExistingMember(
        {
          disciple_id: selected?.id as string,
          network_id: networkId,
        },
        { onSuccess: handleOnSuccess }
      );
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setQ(e.target.value);
    setSelected(null);
  };

  const handleSelectLeader = (leader: SearchedLeader) => {
    setQ(leader.first_name ?? "" + leader.last_name ?? "");
    setSelected(leader);
  };

  const handleClickAddInstead = () => {
    setAddType("Add");
    const words = q.trim().split(" ");
    console.log(words);

    if (words.length === 1) {
      setFirstname(words[0]);
      return;
    }

    if (words.length >= 2) {
      setLastname(words.pop() ?? "");
      setFirstname(words.join(" "));
    }
  };

  let disableButton = false;

  if (!network) disableButton = true;

  return (
    <>
      <Head>
        <title>Disciplr</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout activeRoute="networks">
        <Header>
          <div className="flex w-full justify-between items-center">
            Add Member
          </div>
        </Header>
        <Body>
          <div className="p-7 flex flex-col gap-3">
            {addType === "Add" && (
              <div className="flex flex-col gap-2">
                <label className="block uppercase text-sm">NAME</label>
                <input
                  autoFocus
                  value={first_name}
                  onChange={(e) => setFirstname(e.target.value)}
                  placeholder="First Name"
                  className="bg-[#f2f2f8] w-full px-4 py-3 rounded-lg outline-none capitalize"
                />
                <label className="block uppercase text-sm">SURNAME</label>
                <input
                  value={last_name}
                  onChange={(e) => setLastname(e.target.value)}
                  placeholder="Last Name"
                  className="bg-[#f2f2f8] w-full px-4 py-3 rounded-lg outline-none capitalize"
                />
                <div className="max-h-[180px] overflow-y-auto py-2">
                  <button
                    onClick={() => setAddType("Search")}
                    className="text-[#6474dc] text-xs w-full"
                  >
                    Member already exist?
                  </button>
                </div>
              </div>
            )}
            {addType === "Search" && (
              <div className="flex flex-col gap-2">
                <label className="block uppercase text-sm">Member</label>
                <input
                  autoFocus
                  placeholder="Search Member"
                  value={q}
                  onChange={handleChange}
                  className="bg-[#f2f2f8] w-full px-4 py-3 rounded-lg outline-none"
                />
                {q && searchResult?.length === 0 && (
                  <div className="max-h-[180px] overflow-y-auto py-2">
                    <button
                      onClick={handleClickAddInstead}
                      className="text-[#6474dc] text-xs w-full"
                    >
                      Didn&apos;t find member? Create new member instead.
                    </button>
                  </div>
                )}
                <div
                  style={{
                    marginTop: -8,
                    display: selected || !q ? "none" : "block",
                  }}
                  className="max-h-[180px] overflow-y-auto py-2"
                >
                  {searchResult?.map((leader) => {
                    const name = `${leader.first_name ?? ""} ${
                      leader.last_name ?? ""
                    }`.trim();
                    return (
                      <li
                        onClick={() => handleSelectLeader(leader)}
                        className="block py-2 pl-2"
                        key={leader.id}
                      >
                        {name}
                      </li>
                    );
                  })}
                </div>
              </div>
            )}
            <Button disabled={disableButton} onClick={handleSubmit}>
              Add to Network
            </Button>
          </div>
        </Body>
      </Layout>
    </>
  );
};

export default AddMember;
